<?xml version="1.0" encoding="UTF-8"?>


<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:sec="http://www.springframework.org/schema/security" xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">


    <bean id="authenticationManager" class="org.jasig.cas.authentication.PolicyBasedAuthenticationManager">
        <constructor-arg>
            <map>

                <entry key-ref="proxyAuthenticationHandler" value-ref="proxyPrincipalResolver" />
                <entry key-ref="primaryAuthenticationHandler" value-ref="primaryPrincipalResolver" />
                <entry key-ref="queryDatabaseAuthenticationFanQieHandler" value-ref="primaryPrincipalResolverF" />
            </map>
        </constructor-arg>


        <property name="authenticationPolicy">
            <bean class="org.jasig.cas.authentication.AnyAuthenticationPolicy" />
        </property>
    </bean>
    <!-- baseDao 对数据库操作必须继承baseDao -->
    <bean class="com.fanqie.sso.dao.BaseDao" id="baseDao">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="userDao" class="com.fanqie.sso.dao.UserDao" parent="baseDao">
        <property name="sql" value="select * from tomato_inn_admin where (mobile=? OR user_code=?) and status=2" />
        <property name="parentSql" value="select * from tomato_inn_admin where id=?" />
        <property name="innSql" value="select * from tomato_inn where id=?" />
        <property name="personalizedSql" value="select ip.* from tomato_inn_personalized  ip inner join tomato_inn_to_personalized itp on ip.id = itp.personalized_id where itp.inn_id = ?" />
    </bean>


    <!-- Required for proxy ticket mechanism. -->
    <bean id="proxyAuthenticationHandler"
          class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
          p:httpClient-ref="httpClient" p:requireSecure= "false"/>
    <bean id="queryDatabaseAuthenticationFanQieHandler" class="com.fanqie.sso.jdbc.QueryDatabaseAuthenticationFanQieHandler">
        <property name="dataSource" ref="dataSource" />
        <property name="userDao" ref="userDao"></property>
        <property  name="passwordEncoder"  ref="passwordEncoder"/>
    </bean>
    <bean id="passwordEncoder" class="com.fanqie.sso.handler.FanQiePasswordEncoder" autowire="byName"/>
    <bean id="primaryAuthenticationHandler"
          class="org.jasig.cas.authentication.AcceptUsersAuthenticationHandler">
        <property name="users">
            <map>
                <entry key="casuser" value="Mellon"/>
            </map>
        </property>
    </bean>

    <!-- Required for proxy ticket mechanism -->
    <bean id="proxyPrincipalResolver"
          class="org.jasig.cas.authentication.principal.BasicPrincipalResolver" />

    <!--
       | Resolves a principal from a credential using an attribute repository that is configured to resolve
       | against a deployer-specific store (e.g. LDAP).
       -->
    <bean id="primaryPrincipalResolver"
          class="org.jasig.cas.authentication.principal.PersonDirectoryPrincipalResolver" >
        <property name="attributeRepository" ref="attributeRepository" />
    </bean>
    <bean id="primaryPrincipalResolverF"
          class="com.fanqie.sso.principal.PersonDirectoryPrincipalFanQieResolver" >
        <property name="userDao" ref="userDao"/>
    </bean>

    <!--
    Bean that defines the attributes that a service may return.  This example uses the Stub/Mock version.  A real implementation
    may go against a database or LDAP server.  The id should remain "attributeRepository" though.
    +-->
    <bean id="attributeRepository" class="org.jasig.services.persondir.support.StubPersonAttributeDao"
            p:backingMap-ref="attrRepoBackingMap" />
    
    <util:map id="attrRepoBackingMap">
        <entry key="uid" value="uid" />
        <entry key="eduPersonAffiliation" value="eduPersonAffiliation" /> 
        <entry key="groupMembership" value="groupMembership" />
    </util:map>

    <!-- 
    Sample, in-memory data store for the ServiceRegistry. A real implementation
    would probably want to replace this with the JPA-backed ServiceRegistry DAO
    The name of this bean should remain "serviceRegistryDao".
    +-->
    <bean id="serviceRegistryDao" class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl"
            p:registeredServices-ref="registeredServicesList" />

    <util:list id="registeredServicesList">
        <bean class="org.jasig.cas.services.RegexRegisteredService"
              p:id="0" p:name="HTTP and IMAP" p:description="Allows HTTP(S) and IMAP(S) protocols"
              p:serviceId="^(https?|imaps?)://.*" p:evaluationOrder="10000001" />
        <!--
        Use the following definition instead of the above to further restrict access
        to services within your domain (including sub domains).
        Note that example.com must be replaced with the domain you wish to permit.
        This example also demonstrates the configuration of an attribute filter
        that only allows for attributes whose length is 3.
        -->
        <!--
        <bean class="org.jasig.cas.services.RegexRegisteredService">
            <property name="id" value="1" />
            <property name="name" value="HTTP and IMAP on example.com" />
            <property name="description" value="Allows HTTP(S) and IMAP(S) protocols on example.com" />
            <property name="serviceId" value="^(https?|imaps?)://([A-Za-z0-9_-]+\.)*example\.com/.*" />
            <property name="evaluationOrder" value="0" />
            <property name="attributeFilter">
              <bean class="org.jasig.cas.services.support.RegisteredServiceRegexAttributeFilter" c:regex="^\w{3}$" /> 
            </property>
        </bean>
        -->
    </util:list>
    
    <bean id="auditTrailManager" class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />
    
    <bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor" p:monitors-ref="monitorsList" />
  
    <util:list id="monitorsList">
      <bean class="org.jasig.cas.monitor.MemoryMonitor" p:freeMemoryWarnThreshold="10" />
      <!--
        NOTE
        The following ticket registries support SessionMonitor:
          * DefaultTicketRegistry
          * JpaTicketRegistry
        Remove this monitor if you use an unsupported registry.
      -->
      <bean class="org.jasig.cas.monitor.SessionMonitor"
          p:ticketRegistry-ref="ticketRegistry"
          p:serviceTicketCountWarnThreshold="5000"
          p:sessionCountWarnThreshold="100000" />
    </util:list>

    <bean id="kryoTranscoder"
          class="org.jasig.cas.ticket.registry.support.kryo.KryoTranscoder" init-method="initialize">
        <!-- initialBufferSize -->
        <constructor-arg index="0" value="8192" /></bean>

    <!--加入数据源配置-->
    <beans profile="dev">
            <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
                <property name="driverClassName" value="org.postgresql.Driver"/>
                <property name="url" value="jdbc:postgresql://192.168.1.158:5433/tomato"/>
                <property name="username" value="ota"/>
                <property name="password" value="ota"/>
                <!--<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://127.0.0.1:3306/test"/>
                <property name="username" value="root"/>
                <property name="password" value="123456"/>-->
                <property name="maxWait" value="1000" />
                <property name="initialSize" value="5" />
                <property name="maxActive" value="20" />
                <property name="testWhileIdle" value="false" />
                <property name="timeBetweenEvictionRunsMillis" value="15000" />
                <property name="removeAbandoned" value="true" />
                <property name="removeAbandonedTimeout" value="1800" />
                <property name="validationQuery" value="select 1"/>
            </bean>
           <bean  class="com.fanqie.sso.common.Configuration">
               <property name="webHost" value="http://pms.local.fanqiele.com"/>
               <property name="registerUrl" value="http://pms.local.fanqiele.com:8686/public/view/home/registe.html"/>
               <property name="forgetPassword" value="http://pms.local.fanqiele.com:8686/public/view/home/rp.html"/>
           </bean>
        <bean id="memcachedClient" class="net.spy.memcached.spring.MemcachedClientFactoryBean"
              p:servers="192.168.1.159:22222"
              p:protocol="BINARY"
              p:locatorType="CONSISTENT"
              p:failureMode="Redistribute"
              p:transcoder-ref="kryoTranscoder">
            <property name="hashAlg">
                <util:constant static-field="net.spy.memcached.DefaultHashAlgorithm.FNV1_64_HASH" />
            </property>
        </bean>
    </beans>
    <beans profile="staging">
        <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            <property name="driverClassName" value="org.postgresql.Driver"/>
            <property name="url" value="jdbc:postgresql://10.163.227.13:9999/tomato_db"/>
            <property name="username" value="ota"/>
            <property name="password" value="ota@fanqie.COM888"/>
            <property name="maxWait" value="1000" />
            <property name="initialSize" value="5" />
            <property name="maxActive" value="20" />
            <property name="testWhileIdle" value="true" />
            <property name="testOnBorrow" value="true" />
            <property name="testOnReturn" value="true" />
            <property name="timeBetweenEvictionRunsMillis" value="15000" />
            <property name="minEvictableIdleTimeMillis" value="60000"/>
            <property name="removeAbandoned" value="true" />
            <property name="removeAbandonedTimeout" value="1800" />
            <property name="validationQuery" value="select 1"/>
        </bean>
        <bean  class="com.fanqie.sso.common.Configuration">
            <property name="webHost" value="http://pms.test.fanqielaile.com"/>
            <property name="registerUrl" value="http://pms.test.fanqielaile.com/registe.html"/>
            <property name="forgetPassword" value="http://pms.test.fanqielaile.com/rp.html"/>
        </bean>
        <bean id="memcachedClient" class="net.spy.memcached.spring.MemcachedClientFactoryBean"
              p:servers="10.144.144.19:22222"
              p:protocol="BINARY"
              p:locatorType="CONSISTENT"
              p:failureMode="Redistribute"
              p:transcoder-ref="kryoTranscoder">
            <property name="hashAlg">
                <util:constant static-field="net.spy.memcached.DefaultHashAlgorithm.FNV1_64_HASH" />
            </property>
        </bean>
    </beans>
    <beans profile="production">
       <!-- <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            <property name="driverClassName" value="org.postgresql.Driver"/>
            <property name="url" value="jdbc:postgresql://10.163.227.13:9999/tomato_db"/>
            <property name="username" value="sso_pro"/>
            <property name="password" value="8s5p5BO4HTuPDB3C"/>
            <property name="maxWait" value="1000" />
            <property name="initialSize" value="5" />
            <property name="maxActive" value="20" />
            <property name="testWhileIdle" value="false" />
            <property name="timeBetweenEvictionRunsMillis" value="15000" />
            <property name="removeAbandoned" value="true" />
            <property name="removeAbandonedTimeout" value="1800" />
        </bean>-->
        <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/sso"/>

        <bean  class="com.fanqie.sso.common.Configuration">
            <property name="webHost" value="http://www.fanqiele.com"/>
            <property name="registerUrl" value="http://www.fanqiele.com/registe.html"/>
            <property name="forgetPassword" value="http://www.fanqiele.com/rp.html"/>
        </bean>
        <bean id="memcachedClient" class="net.spy.memcached.spring.MemcachedClientFactoryBean"
              p:servers="10.144.144.19:11211"
              p:protocol="BINARY"
              p:locatorType="CONSISTENT"
              p:failureMode="Redistribute"
              p:transcoder-ref="kryoTranscoder">
            <property name="hashAlg">
                <util:constant static-field="net.spy.memcached.DefaultHashAlgorithm.FNV1_64_HASH" />
            </property>
        </bean>
    </beans>
</beans>
